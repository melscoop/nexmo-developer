# Files in the config/locales directory are used for internationalization
# and are automatically loaded by Rails. If you want to use locales other
# than English, add the necessary files in this directory.
#
# To use the locales, use `I18n.t`:
#
#     I18n.t 'hello'
#
# In views, this is aliased to just `t`:
#
#     <%= t('hello') %>
#
# To use a different locale, set it with `I18n.locale`:
#
#     I18n.locale = :es
#
# This would use the information in config/locales/es.yml.
#
# The following keys must be escaped otherwise they will not be retrieved by
# the default I18n backend:
#
# true, false, on, off, yes, no
#
# Instead, surround them with single quotes.
#
# en:
#   'true': 'foo'
#
# To learn more, please read the Rails Internationalization guide
# available at http://guides.rubyonrails.org/i18n.html.

en:

  menu:
    messaging: Messaging
    voice: Voice
    voice-api: Voice API
    sip: SIP
    account: Account
    number-insight: Number Insight
    stitch: Stitch
    client-sdk: Client SDK
    conversation: Conversation
    user: User
    member: Member
    event: Event
    leg: Leg
    in-app-messaging: In-App Messaging
    in-app-voice: In-App Voice
    in-app-video: In-App Video
    messages: Messages API
    dispatch: Dispatch API
    us-short-codes: US Short Codes
    sms: SMS
    mms: MMS
    guides: Guides
    quickstarts: Quickstarts
    tutorials: Tutorials
    conversion-api: Conversion API
    concepts: Concepts
    code-snippets: Code Snippets
    verify: Verify
    configure: Configure
    contribute: Contribute
    structure: Structure
    sdk-documentation: SDK Documentation
    android: Android
    ios: iOS
    javascript: JavaScript
    javascript-quickstart: JS Quickstart
    redact: Redact
    audit: Audit
    numbers: Numbers
    secret-management: Secret Management
    external-accounts: External Accounts API
    vonage-business-cloud: Vonage Business Cloud
    number-programmability: Number Programmability
    integration-suite: Vonage Integration Suite
    vbc-apis: VBC APIs
    account-api: Account API
    extension-api: Extension API
    user-api: User API
    getting-started: Getting Started
    setup: Setup

    administration: Administration
    tasks: Tasks
    application: Application
    product-lifecycle: Product Lifecycle
    whatsapp: WhatsApp
    messenger: Facebook Messenger
    viber: Viber Service Messages
  layouts:
    partials:
      header:
        documentation: Documentation
        tutorials: Tutorials
        api-reference: API Reference
        sdks-and-tools: SDKs & Tools
        community: Community
        extend: Extend
        hiring: We're hiring
        support: Support
        sign-in: Sign In
        try-it: Try it free
        get_started: Get started now

  code_snippets:
    copy_to_clipboard: Copy to Clipboard
    write_code:
      view_full_source: View full source
      write_the_code: Write the code
    configure_client:
      initialize_dependencies: Initialize your dependencies

  filters:
    generate_your_jwt: Generate your JWT
    install_dependencies: Install dependencies

  services:
    code_snippet_renderer:
      add_instructions_to_file: 'Add the following to `%{file}`:'
      add_instructions_to_code: 'Add the following to your code:'
      create_instructions: 'Create a file named `%{filename}` and add the following code:'
      run_command: >-
        ## Run your code
          Save this file to your machine and run it:
            <pre class='highlight bash run-command'><code>%{command}</code></pre>

      curl:
        only_permitted_dependency: The only permitted curl dependency is `jwt`
        text: >-
          Execute the following command at your terminal prompt to create the <a href="/concepts/guides/authentication#json-web-tokens-jwt">JWT</a> for authentication:
      java:
        add_instructions: 'Add the following to the `main` method of the `%{file}` class:'
        create_instructions: 'Create a class named `%{file}` and add the following code to the `main` method:'
        run_command: >-
          ## Run your code
            We can use the `application` plugin for Gradle to simplify the running of our application.
             Update your `build.gradle` with the following:

             ```groovy
            apply plugin: 'application'
            mainClassName = project.hasProperty('main') ? project.getProperty('main') : ''
            ```

            Run the following `gradle` command to execute your application, replacing `%{chomped_package}` with the package containing `%{file}`:

            <pre class="highlight bash run-command"><code>gradle run -Pmain=%{main}</code></pre>
